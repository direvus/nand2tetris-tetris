class Game {
    field int left, top; // top-left coordinates of play area.
    field int width, height, maxRow; // dimensions of matrix grid.
    field int entropy, lines;
    field String linesString;
    field boolean locking;
    field Queue queue;
    field Matrix matrix;

    constructor Game new() {
        let left = 196;
        let top = 8;
        let width = 10;
        let height = 40;
        let maxRow = 19;
        let linesString = String.new(6);
        do Random.init(1897);
        return this;
    }

    method void run() {
        var boolean exit;
        var char key;
        while (~exit) {
            do showTitleScreen();
            let key = recvKeyPress();

            if ((key = 81) | (key = 113)) { // Q or q
                let exit = true;
            }

            if (key = 32) { // Space
                do Random.addEntropy(entropy);
                // TODO do something with the score? Track a high score?
                do play();
            }
        }
        return;
    }

    /** Receive a single key press event.
     *
     * This method will continue to sample the keyboard until the user has
     * pressed a key and then released it. The function will then return the
     * scan code of the key that was pressed.
     *
     * Also collect the number of ticks spent waiting for the key press to
     * complete, which will be used to initialise the random number generator.
     */
    method char recvKeyPress() {
        var char key;
        while (key = 0) {
            let key = Keyboard.keyPressed();
            let entropy = entropy + 1;
            do Sys.wait(1);
        }

        while (~(Keyboard.keyPressed() = 0)) {
            let entropy = entropy + 1;
            do Sys.wait(1);
        }
        return key;
    }

    method void showTitleScreen() {
        do Screen.clearScreen();
        do Logo.draw(166, 16);

        do Output.moveCursor(13, 1);
        do Util.printString("Tetris (c) 1985-2025 Tetris Holding. Tetris logos, Tetris");
        do Output.moveCursor(14, 1);
        do Util.printString("theme song and Tetriminos are trademarks of Tetris Holding. The");
        do Output.moveCursor(15, 1);
        do Util.printString("Tetris trade dress is owned by Tetris Holding. Licensed to The");
        do Output.moveCursor(16, 1);
        do Util.printString("Tetris Company. Tetris Game Design by Alexey Pajitnov. Tetris");
        do Output.moveCursor(17, 1);
        do Util.printString("Logo Design by Roger Dean. All Rights Reserved.");

        do Output.moveCursor(20, 16);
        do Util.printString("Press [SPACE] to start the game!");
        return;
    }

    method void drawBackground() {
        do Screen.drawRectangle(left - 1, top - 1, left + 121, top + 241);
        do Screen.drawRectangle(left + 128, top + 52, left + 178, top + 241);
        do Screen.drawCircle(left + 152, top + 25, 25);

        do Screen.setColor(false);
        do Screen.drawRectangle(left, top, left + 120, top + 240);
        do Screen.drawRectangle(left + 129, top + 53, left + 177, top + 240);
        do Screen.drawCircle(left + 152, top + 25, 24);

        do Screen.setColor(true);

        do Output.moveCursor(10, 2);
        do Util.printString("Lines: ");
        do Output.printInt(lines);
        return;
    }

    method void drawQueue() {
        var int i, x, y, type;
        do Screen.setColor(false);
        do Screen.drawRectangle(left + 129, top + 53, left + 177, top + 240);
        do Screen.drawCircle(left + 152, top + 25, 24);
        do Screen.setColor(true);

        // Draw the next piece to come out in the circle at the top.
        let x = left + 135;
        let y = top + 13;
        let type = queue.get(0);

        // Minor adjustments to center pieces in the circle.
        if (type = 1) {
            let x = x - 7;
        }
        if (type = 2) {
            let x = x - 7;
            let y = y - 6;
        }
        do drawNonGridPiece(x, y, queue.get(0));

        // Draw the next 5 pieces in the queue in the box.
        let x = left + 129;
        let y = top + 54;
        let i = 1;

        while (i < 6) {
            do drawNonGridPiece(x, y, queue.get(i));
            let y = y + 36;
            let i = i + 1;
        }
        return;
    }

    /** Play a round of Tetris.
     *
     * Continue to run the game until the user either quits voluntarily by
     * pressing 'Q', or triggers a game over condition.
     *
     * In either case, return the final score achieved in the round.
     */
    method int play() {
        var int score;
        var int countdown;
        var boolean continue;

        let continue = true;
        let locking = false;
        let score = 0;
        let lines = 0;

        do Screen.clearScreen();
        do drawBackground();
        let queue = Queue.new();
        let matrix = Matrix.new();
        do drawQueue();

        let countdown = 3;
        while (countdown > 0) {
            do Output.moveCursor(10, 32);
            do Output.printInt(countdown);
            do Sys.wait(1000);
            let countdown = countdown - 1;
        }
        do Screen.setColor(false);
        do Screen.drawRectangle(left, top, left + 120, top + 240);
        do Screen.setColor(true);

        while (continue) {
            let continue = step();
        }

        do queue.dispose();
        do matrix.dispose();
        return score;
    }

    /** Execute one game time step.
     * 
     * Return true if the game is still in play, or false if it's over.
     */
    method boolean step() {
        var int type, i, move;
        var char key;
        var Array piece;

        let type = matrix.getActiveType();
        if (type = 0) {
            let type = queue.pop();
            if (~matrix.addPiece(type)) {
                // If addPiece returned false, it was unable to spawn so that's
                // game over.
                return false;
            }
            let locking = false;
            do drawQueue();
        }

        let i = 0;
        while (i < 5) {
            let key = Keyboard.keyPressed();
            let move = 0;

            if (key = 130) { // left arrow
                if (matrix.canMoveLeft()) {
                    let move = -1;
                }
            }
            if (key = 132) { // right arrow
                if (matrix.canMoveRight()) {
                    let move = 1;
                }
            }
            if ((key = 88) | (key = 120)) { // X or x
                if (matrix.prepareRotate(true)) {
                    do erasePiece(matrix.getActiveCells());
                    do matrix.rotate();
                    do drawPiece(matrix.getActiveCells(), type);
                }
            }
            if ((key = 90) | (key = 122)) { // Z or z
                if (matrix.prepareRotate(false)) {
                    do erasePiece(matrix.getActiveCells());
                    do matrix.rotate();
                    do drawPiece(matrix.getActiveCells(), type);
                }
            }
            if (key = 32) { // space
                /* Do a "Hard Drop" -- immediately drop the piece down as far
                 * as it can go, and then lock it down at that position.
                 */
                while (matrix.canDrop()) {
                    let piece = matrix.getActiveCells();
                    do erasePiece(piece);
                    do matrix.drop();
                    let piece = matrix.getActiveCells();
                    do drawPiece(piece, type);
                    do Sys.wait(20);
                }
                do lockPiece();
                do Sys.wait(10);
                return true;
            }
            // TODO: soft drop
            if (~(move = 0)) {
                let piece = matrix.getActiveCells();
                do erasePiece(piece);
                do matrix.move(move);
                let piece = matrix.getActiveCells();
                do drawPiece(piece, type);
            }
            do Sys.wait(100);
            let i = i + 1;
        }

        if (matrix.canDrop()) {
            let locking = false;
            let piece = matrix.getActiveCells();
            do erasePiece(piece);
            do matrix.drop();
            let piece = matrix.getActiveCells();
            do drawPiece(piece, type);
        } else {
            if (locking) {
                do lockPiece();
            } else {
                let locking = true;
            }
        }
        return true;
    }

    method void lockPiece() {
        var int cleared;
        let cleared = matrix.lock();
        let locking = false;

        if (cleared > 0) {
            let lines = lines + cleared;
            do updateLinesCounter();
            do clearLines();
        }
        return;
    }

    method void clearLines() {
        var int i, y, row, minRow;
        var Array lines, blocks;

        let minRow = 999;
        let lines = matrix.getCompletedLines();
        do Screen.setColor(false);

        // First, erase the completed lines.
        while (i < 4) {
            let row = lines[i];
            if (row > -1) {
                do eraseLine(row);
                if (row < minRow) {
                    let minRow = row;
                }
            }
            let i = i + 1;
        }
        do Sys.wait(1000);

        // Now erase the whole grid area from the lowest completed line to the
        // top.
        let y = top + ((maxRow - minRow) * 12);
        do Screen.drawRectangle(left, top, left + (12 * width), y + 12);

        // Update the matrix
        do matrix.clearLines();

        // Redraw any blocks that dropped as a result
        do Screen.setColor(true);
        let i = minRow * width;
        let blocks = matrix.getLockedCells();
        while (i < (width * height)) {
            if (blocks[i] > 0) {
                do drawBlock(i, blocks[i]);
            }
            let i = i + 1;
        }
        return;
    }

    method void eraseBlock(int location) {
        var int x, y, rows;
        let rows = location / width;
        if (rows > maxRow) {
            return;
        }
        let y = top + ((maxRow - rows) * 12);
        let x = left + ((location - (rows * width)) * 12);
        do Block.erase(x, y);
        return;
    }

    method void erasePiece(Array blocks) {
        do eraseBlock(blocks[0]);
        do eraseBlock(blocks[1]);
        do eraseBlock(blocks[2]);
        do eraseBlock(blocks[3]);
        return;
    }

    /** Erase an entire row of blocks.
     *
     * This method assumes the screen color has already been set to false, and
     * doesn't set it back to true after erasing.
     */
    method void eraseLine(int row) {
        var int y;
        if (row > maxRow) {
            return;
        }
        let y = top + ((maxRow - row) * 12);
        do Screen.drawRectangle(left, y, left + (12 * width), y + 12);
        return;
    }

    method void drawBlock(int location, int type) {
        var int x, y, rows;
        let rows = location / width;
        if (rows > maxRow) {
            return;
        }
        let y = top + ((maxRow - rows) * 12);
        let x = left + ((location - (rows * width)) * 12);
        do Block.draw(x, y, type);
        return;
    }

    method void drawPiece(Array blocks, int type) {
        do drawBlock(blocks[0], type);
        do drawBlock(blocks[1], type);
        do drawBlock(blocks[2], type);
        do drawBlock(blocks[3], type);
        return;
    }

    /** Draw a piece on an arbitrary location on the screen.
     *
     * The `x` and `y` argument should be the screen coordinates at the
     * top-left of the piece's bounding box.
     *
     * The piece is always rendered in its spawn orientation.
     */
    method void drawNonGridPiece(int x, int y, int type) {
        if (type = 1) { // O-type
            do Block.draw(x + 12, y, type);
            do Block.draw(x + 24, y, type);
            do Block.draw(x + 12, y + 12, type);
            do Block.draw(x + 24, y + 12, type);
        }
        if (type = 2) { // I-type
            do Block.draw(x, y + 12, type);
            do Block.draw(x + 12, y + 12, type);
            do Block.draw(x + 24, y + 12, type);
            do Block.draw(x + 36, y + 12, type);
        }
        if (type = 3) { // T-type
            do Block.draw(x + 12, y, type);
            do Block.draw(x, y + 12, type);
            do Block.draw(x + 12, y + 12, type);
            do Block.draw(x + 24, y + 12, type);
        }
        if (type = 4) { // L-type
            do Block.draw(x + 24, y, type);
            do Block.draw(x, y + 12, type);
            do Block.draw(x + 12, y + 12, type);
            do Block.draw(x + 24, y + 12, type);
        }
        if (type = 5) { // J-type
            do Block.draw(x, y, type);
            do Block.draw(x, y + 12, type);
            do Block.draw(x + 12, y + 12, type);
            do Block.draw(x + 24, y + 12, type);
        }
        if (type = 6) { // S-type
            do Block.draw(x + 12, y, type);
            do Block.draw(x + 24, y, type);
            do Block.draw(x, y + 12, type);
            do Block.draw(x + 12, y + 12, type);
        }
        if (type = 7) { // Z-type
            do Block.draw(x, y, type);
            do Block.draw(x + 12, y, type);
            do Block.draw(x + 12, y + 12, type);
            do Block.draw(x + 24, y + 12, type);
        }
        return;
    }

    /** Update the lines cleared counter. */
    method void updateLinesCounter() {
        do Output.moveCursor(10, 9);
        do Screen.setColor(false);
        do Screen.drawRectangle(72, 100, 120, 110);
        do Screen.setColor(true);
        do Output.moveCursor(10, 9);
        do linesString.setInt(lines);
        do Output.printString(linesString);
        return;
    }

    method void dispose() {
        do linesString.dispose();
        do queue.dispose();
        do matrix.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
